def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
Project background_geolocation = project(':flutter_background_geolocation')
apply from: "${background_geolocation.projectDir}/background_geolocation.gradle"
android {

    purgeBackgroundGeolocationDebugResources(applicationVariants)

    compileSdkVersion 28

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    signingConfigs {
        // SETUP your own keystore files
        debug {
            storeFile file('keystore/debug.jks')
            storePassword 'coronatrace'
            keyAlias = 'coronatrace'
            keyPassword 'coronatrace'
        }
        release {
            storeFile file('keystore/release.jks')
            storePassword 'coronatrace_release'
            keyAlias = 'coronatrace_release'
            keyPassword 'coronatrace_release'
        }
    }

    defaultConfig {
        applicationId "org.coronatrace.mobile"
        minSdkVersion 16
        targetSdkVersion 28
        versionCode flutterVersionCode.toInteger()
        multiDexEnabled true
        versionName flutterVersionName
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            shrinkResources false
            proguardFiles "${background_geolocation.projectDir}/proguard-rules.pro"
        }
        debug {
            signingConfig signingConfigs.debug
        }
    }
}

/**
 * Purge flutter_background_geolocation debug sounds from release build.
 */
def purgeBackgroundGeolocationDebugResources(applicationVariants) {
    applicationVariants.all { variant ->
        if (variant.buildType.name == 'release') {
            variant.mergeResources.doLast {
                delete(fileTree(dir: variant.mergeResources.outputDir, includes: ['raw_tslocationmanager*']))

            }
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // Add the Firebase SDK for Google Analytics
    implementation 'com.google.firebase:firebase-analytics:17.2.2'
    implementation 'com.google.firebase:firebase-messaging:20.1.0'
}

apply plugin: 'com.google.gms.google-services'  // Google Services plugin
